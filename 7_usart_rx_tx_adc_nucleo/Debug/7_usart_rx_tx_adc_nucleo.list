
7_usart_rx_tx_adc_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000334  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004f8  08000500  00010500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004f8  080004f8  00010500  2**0
                  CONTENTS
  4 .ARM          00000000  080004f8  080004f8  00010500  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004f8  08000500  00010500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004f8  080004f8  000104f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004fc  080004fc  000104fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000500  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000500  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010500  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a70  00000000  00000000  00010530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000343  00000000  00000000  00010fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b0  00000000  00000000  000112e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000078  00000000  00000000  00011398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198b6  00000000  00000000  00011410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000118b  00000000  00000000  0002acc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e7f3  00000000  00000000  0002be51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ba644  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000016c  00000000  00000000  000ba694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080004e0 	.word	0x080004e0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080004e0 	.word	0x080004e0

08000204 <ADC_Init>:
#include "adc.h"


void ADC_Init(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
    // Habilitar el reloj para el ADC1
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000208:	4b1a      	ldr	r3, [pc, #104]	; (8000274 <ADC_Init+0x70>)
 800020a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800020c:	4a19      	ldr	r2, [pc, #100]	; (8000274 <ADC_Init+0x70>)
 800020e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000212:	6453      	str	r3, [r2, #68]	; 0x44

    // Habilitar el reloj para el GPIOA
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000214:	4b17      	ldr	r3, [pc, #92]	; (8000274 <ADC_Init+0x70>)
 8000216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000218:	4a16      	ldr	r2, [pc, #88]	; (8000274 <ADC_Init+0x70>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6313      	str	r3, [r2, #48]	; 0x30

    // Configurar el pin A1 como entrada analógica
    GPIOA->MODER |= GPIO_MODER_MODER1;
 8000220:	4b15      	ldr	r3, [pc, #84]	; (8000278 <ADC_Init+0x74>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a14      	ldr	r2, [pc, #80]	; (8000278 <ADC_Init+0x74>)
 8000226:	f043 030c 	orr.w	r3, r3, #12
 800022a:	6013      	str	r3, [r2, #0]

    // Configurar la frecuencia de muestreo del ADC
    ADC1->CR2 |= ADC_CR2_ADON; // Habilitar el ADC
 800022c:	4b13      	ldr	r3, [pc, #76]	; (800027c <ADC_Init+0x78>)
 800022e:	689b      	ldr	r3, [r3, #8]
 8000230:	4a12      	ldr	r2, [pc, #72]	; (800027c <ADC_Init+0x78>)
 8000232:	f043 0301 	orr.w	r3, r3, #1
 8000236:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= ADC_CR2_CONT; // Modo de conversión continua
 8000238:	4b10      	ldr	r3, [pc, #64]	; (800027c <ADC_Init+0x78>)
 800023a:	689b      	ldr	r3, [r3, #8]
 800023c:	4a0f      	ldr	r2, [pc, #60]	; (800027c <ADC_Init+0x78>)
 800023e:	f043 0302 	orr.w	r3, r3, #2
 8000242:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= ADC_CR2_SWSTART; // Iniciar la conversión
 8000244:	4b0d      	ldr	r3, [pc, #52]	; (800027c <ADC_Init+0x78>)
 8000246:	689b      	ldr	r3, [r3, #8]
 8000248:	4a0c      	ldr	r2, [pc, #48]	; (800027c <ADC_Init+0x78>)
 800024a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800024e:	6093      	str	r3, [r2, #8]

    // Configurar el canal del ADC
    ADC1->SQR3 |= 0x01; // Seleccionar el canal 1
 8000250:	4b0a      	ldr	r3, [pc, #40]	; (800027c <ADC_Init+0x78>)
 8000252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000254:	4a09      	ldr	r2, [pc, #36]	; (800027c <ADC_Init+0x78>)
 8000256:	f043 0301 	orr.w	r3, r3, #1
 800025a:	6353      	str	r3, [r2, #52]	; 0x34

    // Calibrar el ADC
    ADC1->CR2 |= ADC_CR2_ADON; // Habilitar el ADC
 800025c:	4b07      	ldr	r3, [pc, #28]	; (800027c <ADC_Init+0x78>)
 800025e:	689b      	ldr	r3, [r3, #8]
 8000260:	4a06      	ldr	r2, [pc, #24]	; (800027c <ADC_Init+0x78>)
 8000262:	f043 0301 	orr.w	r3, r3, #1
 8000266:	6093      	str	r3, [r2, #8]
    //ADC1->CR2 |= ADC_CR2_CAL; // Iniciar la calibración
    //while (ADC1->CR2 & ADC_CR2_CAL) {} // Esperar hasta que la calibración haya terminado
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	40023800 	.word	0x40023800
 8000278:	40020000 	.word	0x40020000
 800027c:	40012000 	.word	0x40012000

08000280 <ADC_Read>:

uint32_t ADC_Read(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
    ADC1->CR2 |= ADC_CR2_SWSTART; // Iniciar la conversión
 8000284:	4b09      	ldr	r3, [pc, #36]	; (80002ac <ADC_Read+0x2c>)
 8000286:	689b      	ldr	r3, [r3, #8]
 8000288:	4a08      	ldr	r2, [pc, #32]	; (80002ac <ADC_Read+0x2c>)
 800028a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800028e:	6093      	str	r3, [r2, #8]

    // Esperar hasta que la conversión se complete
    while (!(ADC1->SR & ADC_SR_EOC)) {}
 8000290:	bf00      	nop
 8000292:	4b06      	ldr	r3, [pc, #24]	; (80002ac <ADC_Read+0x2c>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f003 0302 	and.w	r3, r3, #2
 800029a:	2b00      	cmp	r3, #0
 800029c:	d0f9      	beq.n	8000292 <ADC_Read+0x12>

    return ADC1->DR; // Devolver el valor convertido
 800029e:	4b03      	ldr	r3, [pc, #12]	; (80002ac <ADC_Read+0x2c>)
 80002a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	40012000 	.word	0x40012000

080002b0 <main>:
char key;
uint32_t sensor_value;

////////////////////////////Programa general
int main (void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
	uart2_tx_init();
 80002b6:	f000 f817 	bl	80002e8 <uart2_tx_init>

	while(1)
	{
		//start_convertion();
		//sensor_value = adc_read();
		ADC_Init();
 80002ba:	f7ff ffa3 	bl	8000204 <ADC_Init>
		uint32_t adc_value = ADC_Read();
 80002be:	f7ff ffdf 	bl	8000280 <ADC_Read>
 80002c2:	6038      	str	r0, [r7, #0]
		//printf("Sensor: %d \n\r", (int)adc_value);
		uart2_write(adc_value);
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 f87e 	bl	80003c8 <uart2_write>
		if (key == '1')
		{
			uart2_write('C');
		}
		*/
		for (int var = 0; var < 500000; ++var)
 80002cc:	2300      	movs	r3, #0
 80002ce:	607b      	str	r3, [r7, #4]
 80002d0:	e002      	b.n	80002d8 <main+0x28>
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	3301      	adds	r3, #1
 80002d6:	607b      	str	r3, [r7, #4]
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	4a02      	ldr	r2, [pc, #8]	; (80002e4 <main+0x34>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	ddf8      	ble.n	80002d2 <main+0x22>
	{
 80002e0:	e7eb      	b.n	80002ba <main+0xa>
 80002e2:	bf00      	nop
 80002e4:	0007a11f 	.word	0x0007a11f

080002e8 <uart2_tx_init>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate);


void uart2_tx_init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	//clock to gpioa
	RCC->AHB1ENR |= GPIOAEN; //6.3.10 RCC AHB1 peripheral clock enable register (RCC_AHB1ENR)
 80002ec:	4b32      	ldr	r3, [pc, #200]	; (80003b8 <uart2_tx_init+0xd0>)
 80002ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f0:	4a31      	ldr	r2, [pc, #196]	; (80003b8 <uart2_tx_init+0xd0>)
 80002f2:	f043 0301 	orr.w	r3, r3, #1
 80002f6:	6313      	str	r3, [r2, #48]	; 0x30

	//SET PA2-PA3 to alternate function mode
	//7.4.1 GPIO port mode register (GPIOx_MODER) (x = A..H)
	//10: Alternate function mode
	GPIOA->MODER &= ~(1U<<4); // set to 0
 80002f8:	4b30      	ldr	r3, [pc, #192]	; (80003bc <uart2_tx_init+0xd4>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a2f      	ldr	r2, [pc, #188]	; (80003bc <uart2_tx_init+0xd4>)
 80002fe:	f023 0310 	bic.w	r3, r3, #16
 8000302:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U<<5); // set to 1
 8000304:	4b2d      	ldr	r3, [pc, #180]	; (80003bc <uart2_tx_init+0xd4>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a2c      	ldr	r2, [pc, #176]	; (80003bc <uart2_tx_init+0xd4>)
 800030a:	f043 0320 	orr.w	r3, r3, #32
 800030e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<6); // set to 0
 8000310:	4b2a      	ldr	r3, [pc, #168]	; (80003bc <uart2_tx_init+0xd4>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a29      	ldr	r2, [pc, #164]	; (80003bc <uart2_tx_init+0xd4>)
 8000316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800031a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U<<7); // set to 1
 800031c:	4b27      	ldr	r3, [pc, #156]	; (80003bc <uart2_tx_init+0xd4>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a26      	ldr	r2, [pc, #152]	; (80003bc <uart2_tx_init+0xd4>)
 8000322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000326:	6013      	str	r3, [r2, #0]

	//PA2-PA3 Alternate function Uart tx AF07
	//7.4.9 GPIO alternate function low register (GPIOx_AFRL) (x = A..H)
	//0111: AF7
	GPIOA->AFR[0] |= (1U<<8);
 8000328:	4b24      	ldr	r3, [pc, #144]	; (80003bc <uart2_tx_init+0xd4>)
 800032a:	6a1b      	ldr	r3, [r3, #32]
 800032c:	4a23      	ldr	r2, [pc, #140]	; (80003bc <uart2_tx_init+0xd4>)
 800032e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000332:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000334:	4b21      	ldr	r3, [pc, #132]	; (80003bc <uart2_tx_init+0xd4>)
 8000336:	6a1b      	ldr	r3, [r3, #32]
 8000338:	4a20      	ldr	r2, [pc, #128]	; (80003bc <uart2_tx_init+0xd4>)
 800033a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800033e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000340:	4b1e      	ldr	r3, [pc, #120]	; (80003bc <uart2_tx_init+0xd4>)
 8000342:	6a1b      	ldr	r3, [r3, #32]
 8000344:	4a1d      	ldr	r2, [pc, #116]	; (80003bc <uart2_tx_init+0xd4>)
 8000346:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800034a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 800034c:	4b1b      	ldr	r3, [pc, #108]	; (80003bc <uart2_tx_init+0xd4>)
 800034e:	6a1b      	ldr	r3, [r3, #32]
 8000350:	4a1a      	ldr	r2, [pc, #104]	; (80003bc <uart2_tx_init+0xd4>)
 8000352:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000356:	6213      	str	r3, [r2, #32]
	//0111: AF7
	GPIOA->AFR[0] |= (1U<<12);
 8000358:	4b18      	ldr	r3, [pc, #96]	; (80003bc <uart2_tx_init+0xd4>)
 800035a:	6a1b      	ldr	r3, [r3, #32]
 800035c:	4a17      	ldr	r2, [pc, #92]	; (80003bc <uart2_tx_init+0xd4>)
 800035e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000362:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 8000364:	4b15      	ldr	r3, [pc, #84]	; (80003bc <uart2_tx_init+0xd4>)
 8000366:	6a1b      	ldr	r3, [r3, #32]
 8000368:	4a14      	ldr	r2, [pc, #80]	; (80003bc <uart2_tx_init+0xd4>)
 800036a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800036e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 8000370:	4b12      	ldr	r3, [pc, #72]	; (80003bc <uart2_tx_init+0xd4>)
 8000372:	6a1b      	ldr	r3, [r3, #32]
 8000374:	4a11      	ldr	r2, [pc, #68]	; (80003bc <uart2_tx_init+0xd4>)
 8000376:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800037a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<15);
 800037c:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <uart2_tx_init+0xd4>)
 800037e:	6a1b      	ldr	r3, [r3, #32]
 8000380:	4a0e      	ldr	r2, [pc, #56]	; (80003bc <uart2_tx_init+0xd4>)
 8000382:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000386:	6213      	str	r3, [r2, #32]

	//clock to uart2
	RCC->APB1ENR |= UART2EN;	//6.3.13 RCC APB1 peripheral clock enable register (RCC_APB1ENR)
 8000388:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <uart2_tx_init+0xd0>)
 800038a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800038c:	4a0a      	ldr	r2, [pc, #40]	; (80003b8 <uart2_tx_init+0xd0>)
 800038e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000392:	6413      	str	r3, [r2, #64]	; 0x40
								//Bit 17 USART2EN: USART2 clock enable
								//1: USART2 clock enabled

	//Configura 8audrate
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 8000394:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000398:	4909      	ldr	r1, [pc, #36]	; (80003c0 <uart2_tx_init+0xd8>)
 800039a:	480a      	ldr	r0, [pc, #40]	; (80003c4 <uart2_tx_init+0xdc>)
 800039c:	f000 f82c 	bl	80003f8 <uart_set_baudrate>

	//Configure de transfer direction.
	USART2->CR1 = (CR1_TE | CR1_RE);
 80003a0:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <uart2_tx_init+0xdc>)
 80003a2:	220c      	movs	r2, #12
 80003a4:	60da      	str	r2, [r3, #12]


	//Enable UART module.
	USART2->CR1 |= CR1_UE;
 80003a6:	4b07      	ldr	r3, [pc, #28]	; (80003c4 <uart2_tx_init+0xdc>)
 80003a8:	68db      	ldr	r3, [r3, #12]
 80003aa:	4a06      	ldr	r2, [pc, #24]	; (80003c4 <uart2_tx_init+0xdc>)
 80003ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003b0:	60d3      	str	r3, [r2, #12]

}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40023800 	.word	0x40023800
 80003bc:	40020000 	.word	0x40020000
 80003c0:	00f42400 	.word	0x00f42400
 80003c4:	40004400 	.word	0x40004400

080003c8 <uart2_write>:



void uart2_write(int ch)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	// Asegure que tx data este vigente
	while(!(USART2->SR & SR_TXE)){}
 80003d0:	bf00      	nop
 80003d2:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <uart2_write+0x2c>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d0f9      	beq.n	80003d2 <uart2_write+0xa>
	//Write to transmit data register
	USART2->DR = (ch & 0XFF);
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a04      	ldr	r2, [pc, #16]	; (80003f4 <uart2_write+0x2c>)
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	6053      	str	r3, [r2, #4]
}
 80003e6:	bf00      	nop
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	40004400 	.word	0x40004400

080003f8 <uart_set_baudrate>:
}



static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	60f8      	str	r0, [r7, #12]
 8000400:	60b9      	str	r1, [r7, #8]
 8000402:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,Baudrate);
 8000404:	6879      	ldr	r1, [r7, #4]
 8000406:	68b8      	ldr	r0, [r7, #8]
 8000408:	f000 f808 	bl	800041c <compute_uart_bd>
 800040c:	4603      	mov	r3, r0
 800040e:	461a      	mov	r2, r3
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	609a      	str	r2, [r3, #8]
}
 8000414:	bf00      	nop
 8000416:	3710      	adds	r7, #16
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}

0800041c <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate)
{
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
	return((PeriphClk + (Baudrate/2U))/Baudrate);
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	085a      	lsrs	r2, r3, #1
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	441a      	add	r2, r3
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	fbb2 f3f3 	udiv	r3, r2, r3
 8000434:	b29b      	uxth	r3, r3
}
 8000436:	4618      	mov	r0, r3
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
	...

08000444 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000444:	480d      	ldr	r0, [pc, #52]	; (800047c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000446:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000448:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800044c:	480c      	ldr	r0, [pc, #48]	; (8000480 <LoopForever+0x6>)
  ldr r1, =_edata
 800044e:	490d      	ldr	r1, [pc, #52]	; (8000484 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000450:	4a0d      	ldr	r2, [pc, #52]	; (8000488 <LoopForever+0xe>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000454:	e002      	b.n	800045c <LoopCopyDataInit>

08000456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045a:	3304      	adds	r3, #4

0800045c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800045c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800045e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000460:	d3f9      	bcc.n	8000456 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000462:	4a0a      	ldr	r2, [pc, #40]	; (800048c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000464:	4c0a      	ldr	r4, [pc, #40]	; (8000490 <LoopForever+0x16>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000468:	e001      	b.n	800046e <LoopFillZerobss>

0800046a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800046c:	3204      	adds	r2, #4

0800046e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800046e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000470:	d3fb      	bcc.n	800046a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000472:	f000 f811 	bl	8000498 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000476:	f7ff ff1b 	bl	80002b0 <main>

0800047a <LoopForever>:

LoopForever:
  b LoopForever
 800047a:	e7fe      	b.n	800047a <LoopForever>
  ldr   r0, =_estack
 800047c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000484:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000488:	08000500 	.word	0x08000500
  ldr r2, =_sbss
 800048c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000490:	2000001c 	.word	0x2000001c

08000494 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000494:	e7fe      	b.n	8000494 <ADC_IRQHandler>
	...

08000498 <__libc_init_array>:
 8000498:	b570      	push	{r4, r5, r6, lr}
 800049a:	4d0d      	ldr	r5, [pc, #52]	; (80004d0 <__libc_init_array+0x38>)
 800049c:	4c0d      	ldr	r4, [pc, #52]	; (80004d4 <__libc_init_array+0x3c>)
 800049e:	1b64      	subs	r4, r4, r5
 80004a0:	10a4      	asrs	r4, r4, #2
 80004a2:	2600      	movs	r6, #0
 80004a4:	42a6      	cmp	r6, r4
 80004a6:	d109      	bne.n	80004bc <__libc_init_array+0x24>
 80004a8:	4d0b      	ldr	r5, [pc, #44]	; (80004d8 <__libc_init_array+0x40>)
 80004aa:	4c0c      	ldr	r4, [pc, #48]	; (80004dc <__libc_init_array+0x44>)
 80004ac:	f000 f818 	bl	80004e0 <_init>
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	10a4      	asrs	r4, r4, #2
 80004b4:	2600      	movs	r6, #0
 80004b6:	42a6      	cmp	r6, r4
 80004b8:	d105      	bne.n	80004c6 <__libc_init_array+0x2e>
 80004ba:	bd70      	pop	{r4, r5, r6, pc}
 80004bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80004c0:	4798      	blx	r3
 80004c2:	3601      	adds	r6, #1
 80004c4:	e7ee      	b.n	80004a4 <__libc_init_array+0xc>
 80004c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ca:	4798      	blx	r3
 80004cc:	3601      	adds	r6, #1
 80004ce:	e7f2      	b.n	80004b6 <__libc_init_array+0x1e>
 80004d0:	080004f8 	.word	0x080004f8
 80004d4:	080004f8 	.word	0x080004f8
 80004d8:	080004f8 	.word	0x080004f8
 80004dc:	080004fc 	.word	0x080004fc

080004e0 <_init>:
 80004e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004e2:	bf00      	nop
 80004e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004e6:	bc08      	pop	{r3}
 80004e8:	469e      	mov	lr, r3
 80004ea:	4770      	bx	lr

080004ec <_fini>:
 80004ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ee:	bf00      	nop
 80004f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f2:	bc08      	pop	{r3}
 80004f4:	469e      	mov	lr, r3
 80004f6:	4770      	bx	lr
