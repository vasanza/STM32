
10_I2C_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d18  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ee0  08000ee8  00010ee8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ee0  08000ee0  00010ee8  2**0
                  CONTENTS
  4 .ARM          00000000  08000ee0  08000ee0  00010ee8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ee0  08000ee8  00010ee8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ee0  08000ee0  00010ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ee4  08000ee4  00010ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ee8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000000  08000ee8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08000ee8  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010ee8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000008a1  00000000  00000000  00010f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002fd  00000000  00000000  000117b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  00011ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000080  00000000  00000000  00011b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019960  00000000  00000000  00011bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000014fa  00000000  00000000  0002b550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e8a2  00000000  00000000  0002ca4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bb2ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000298  00000000  00000000  000bb33c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08000ec8 	.word	0x08000ec8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	08000ec8 	.word	0x08000ec8

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	; 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	; 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2f>:
 80007d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007dc:	bf24      	itt	cs
 80007de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007e6:	d90d      	bls.n	8000804 <__aeabi_d2f+0x30>
 80007e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007fc:	bf08      	it	eq
 80007fe:	f020 0001 	biceq.w	r0, r0, #1
 8000802:	4770      	bx	lr
 8000804:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000808:	d121      	bne.n	800084e <__aeabi_d2f+0x7a>
 800080a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800080e:	bfbc      	itt	lt
 8000810:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000814:	4770      	bxlt	lr
 8000816:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800081a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800081e:	f1c2 0218 	rsb	r2, r2, #24
 8000822:	f1c2 0c20 	rsb	ip, r2, #32
 8000826:	fa10 f30c 	lsls.w	r3, r0, ip
 800082a:	fa20 f002 	lsr.w	r0, r0, r2
 800082e:	bf18      	it	ne
 8000830:	f040 0001 	orrne.w	r0, r0, #1
 8000834:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000838:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800083c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000840:	ea40 000c 	orr.w	r0, r0, ip
 8000844:	fa23 f302 	lsr.w	r3, r3, r2
 8000848:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800084c:	e7cc      	b.n	80007e8 <__aeabi_d2f+0x14>
 800084e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000852:	d107      	bne.n	8000864 <__aeabi_d2f+0x90>
 8000854:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000858:	bf1e      	ittt	ne
 800085a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800085e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000862:	4770      	bxne	lr
 8000864:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000868:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800086c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop

08000874 <aadxl_read_address>:

char data;
 uint8_t data_rec[6];

void aadxl_read_address(uint8_t reg)
 {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
	 II2C1_byteRead(DEVICE_ADDR, reg, &data);
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	4a04      	ldr	r2, [pc, #16]	; (8000894 <aadxl_read_address+0x20>)
 8000882:	4619      	mov	r1, r3
 8000884:	2053      	movs	r0, #83	; 0x53
 8000886:	f000 f8e5 	bl	8000a54 <II2C1_byteRead>

 }
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2000001c 	.word	0x2000001c

08000898 <aadxl_write>:
void aadxl_write (uint8_t reg, char value)
 {
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	460a      	mov	r2, r1
 80008a2:	71fb      	strb	r3, [r7, #7]
 80008a4:	4613      	mov	r3, r2
 80008a6:	71bb      	strb	r3, [r7, #6]
	 char data[1];
	 data[0] = value;
 80008a8:	79bb      	ldrb	r3, [r7, #6]
 80008aa:	733b      	strb	r3, [r7, #12]

	 II2C1_burstWrite(DEVICE_ADDR, reg, 1, data);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	79f9      	ldrb	r1, [r7, #7]
 80008b2:	2201      	movs	r2, #1
 80008b4:	2053      	movs	r0, #83	; 0x53
 80008b6:	f000 f9dd 	bl	8000c74 <II2C1_burstWrite>

 }
 80008ba:	bf00      	nop
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <aadxl_read_values>:
void aadxl_read_values(uint8_t reg)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
	II2C1_burstRead(DEVICE_ADDR, reg, 6,(char *) data_rec);
 80008ce:	79f9      	ldrb	r1, [r7, #7]
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <aadxl_read_values+0x20>)
 80008d2:	2206      	movs	r2, #6
 80008d4:	2053      	movs	r0, #83	; 0x53
 80008d6:	f000 f931 	bl	8000b3c <II2C1_burstRead>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000020 	.word	0x20000020

080008e8 <aadxl_init>:

void aadxl_init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	//enable i2c
	II2C1_init();
 80008ec:	f000 f812 	bl	8000914 <II2C1_init>
	//read  the DEVID. this should return 0XE5
	aadxl_read_address(DEVID_R);
 80008f0:	2000      	movs	r0, #0
 80008f2:	f7ff ffbf 	bl	8000874 <aadxl_read_address>
	//Set data format range to +-4g
	aadxl_write(DATA_FORMAT_R, FOUR_G);
 80008f6:	2101      	movs	r1, #1
 80008f8:	2031      	movs	r0, #49	; 0x31
 80008fa:	f7ff ffcd 	bl	8000898 <aadxl_write>
	//reset all bits
	aadxl_write(POWER_CONTROL_R, RESET);
 80008fe:	2100      	movs	r1, #0
 8000900:	202d      	movs	r0, #45	; 0x2d
 8000902:	f7ff ffc9 	bl	8000898 <aadxl_write>
	// configure power control  mesure bit
	aadxl_write(POWER_CONTROL_R, SET_MEASURE_B);
 8000906:	2108      	movs	r1, #8
 8000908:	202d      	movs	r0, #45	; 0x2d
 800090a:	f7ff ffc5 	bl	8000898 <aadxl_write>
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <II2C1_init>:
 * Alternate function
 * PB8 --- SCL
 * PB9 --- SDA
 * */
void II2C1_init(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
	//Enable clock I2C1
	//PB8 and PB9 mode to alternate function
	//PB8 and PB9 output type open drain
	//PB8 and PB9 enable pull up
	//Enable clock access to GPIOB*/
RCC -> AHB1ENR |=GPIOBEN;
 8000918:	4b4b      	ldr	r3, [pc, #300]	; (8000a48 <II2C1_init+0x134>)
 800091a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091c:	4a4a      	ldr	r2, [pc, #296]	; (8000a48 <II2C1_init+0x134>)
 800091e:	f043 0302 	orr.w	r3, r3, #2
 8000922:	6313      	str	r3, [r2, #48]	; 0x30
/*Set PB8 and PB9 mode to alternate function*/
//Table 11. Alternate function (continued)

GPIOB->MODER &=~(1U<<16);
 8000924:	4b49      	ldr	r3, [pc, #292]	; (8000a4c <II2C1_init+0x138>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a48      	ldr	r2, [pc, #288]	; (8000a4c <II2C1_init+0x138>)
 800092a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800092e:	6013      	str	r3, [r2, #0]
GPIOB->MODER |=(1U<<17);
 8000930:	4b46      	ldr	r3, [pc, #280]	; (8000a4c <II2C1_init+0x138>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a45      	ldr	r2, [pc, #276]	; (8000a4c <II2C1_init+0x138>)
 8000936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800093a:	6013      	str	r3, [r2, #0]

GPIOB->MODER &=~(1U<<18);
 800093c:	4b43      	ldr	r3, [pc, #268]	; (8000a4c <II2C1_init+0x138>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a42      	ldr	r2, [pc, #264]	; (8000a4c <II2C1_init+0x138>)
 8000942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000946:	6013      	str	r3, [r2, #0]
GPIOB->MODER |=(1U<<19);
 8000948:	4b40      	ldr	r3, [pc, #256]	; (8000a4c <II2C1_init+0x138>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a3f      	ldr	r2, [pc, #252]	; (8000a4c <II2C1_init+0x138>)
 800094e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000952:	6013      	str	r3, [r2, #0]

/*Set PB8 and PB9 output type to open drain*/
GPIOB->OTYPER |=(1U<<8);
 8000954:	4b3d      	ldr	r3, [pc, #244]	; (8000a4c <II2C1_init+0x138>)
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	4a3c      	ldr	r2, [pc, #240]	; (8000a4c <II2C1_init+0x138>)
 800095a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800095e:	6053      	str	r3, [r2, #4]
GPIOB->OTYPER |=(1U<<9);
 8000960:	4b3a      	ldr	r3, [pc, #232]	; (8000a4c <II2C1_init+0x138>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	4a39      	ldr	r2, [pc, #228]	; (8000a4c <II2C1_init+0x138>)
 8000966:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800096a:	6053      	str	r3, [r2, #4]

/*Enable Pull-up for PB8 and PB9*/
GPIOB->PUPDR |=(1U<<16);
 800096c:	4b37      	ldr	r3, [pc, #220]	; (8000a4c <II2C1_init+0x138>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	4a36      	ldr	r2, [pc, #216]	; (8000a4c <II2C1_init+0x138>)
 8000972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000976:	60d3      	str	r3, [r2, #12]
GPIOB->PUPDR &=~(1U<<17);
 8000978:	4b34      	ldr	r3, [pc, #208]	; (8000a4c <II2C1_init+0x138>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	4a33      	ldr	r2, [pc, #204]	; (8000a4c <II2C1_init+0x138>)
 800097e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000982:	60d3      	str	r3, [r2, #12]

GPIOB->PUPDR |=(1U<<18);
 8000984:	4b31      	ldr	r3, [pc, #196]	; (8000a4c <II2C1_init+0x138>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	4a30      	ldr	r2, [pc, #192]	; (8000a4c <II2C1_init+0x138>)
 800098a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800098e:	60d3      	str	r3, [r2, #12]
GPIOB->PUPDR &=~(1U<<19);
 8000990:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <II2C1_init+0x138>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	4a2d      	ldr	r2, [pc, #180]	; (8000a4c <II2C1_init+0x138>)
 8000996:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800099a:	60d3      	str	r3, [r2, #12]

//
	GPIOB->AFR[1] &= ~(1U<<0);
 800099c:	4b2b      	ldr	r3, [pc, #172]	; (8000a4c <II2C1_init+0x138>)
 800099e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a0:	4a2a      	ldr	r2, [pc, #168]	; (8000a4c <II2C1_init+0x138>)
 80009a2:	f023 0301 	bic.w	r3, r3, #1
 80009a6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1U<<1);
 80009a8:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <II2C1_init+0x138>)
 80009aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ac:	4a27      	ldr	r2, [pc, #156]	; (8000a4c <II2C1_init+0x138>)
 80009ae:	f023 0302 	bic.w	r3, r3, #2
 80009b2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |=  (1U<<2);
 80009b4:	4b25      	ldr	r3, [pc, #148]	; (8000a4c <II2C1_init+0x138>)
 80009b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b8:	4a24      	ldr	r2, [pc, #144]	; (8000a4c <II2C1_init+0x138>)
 80009ba:	f043 0304 	orr.w	r3, r3, #4
 80009be:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1U<<3);
 80009c0:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <II2C1_init+0x138>)
 80009c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c4:	4a21      	ldr	r2, [pc, #132]	; (8000a4c <II2C1_init+0x138>)
 80009c6:	f023 0308 	bic.w	r3, r3, #8
 80009ca:	6253      	str	r3, [r2, #36]	; 0x24

	GPIOB->AFR[1] &= ~(1U<<4);
 80009cc:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <II2C1_init+0x138>)
 80009ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d0:	4a1e      	ldr	r2, [pc, #120]	; (8000a4c <II2C1_init+0x138>)
 80009d2:	f023 0310 	bic.w	r3, r3, #16
 80009d6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1U<<5);
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <II2C1_init+0x138>)
 80009da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009dc:	4a1b      	ldr	r2, [pc, #108]	; (8000a4c <II2C1_init+0x138>)
 80009de:	f023 0320 	bic.w	r3, r3, #32
 80009e2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |=  (1U<<6);
 80009e4:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <II2C1_init+0x138>)
 80009e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e8:	4a18      	ldr	r2, [pc, #96]	; (8000a4c <II2C1_init+0x138>)
 80009ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ee:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1U<<7);
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <II2C1_init+0x138>)
 80009f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f4:	4a15      	ldr	r2, [pc, #84]	; (8000a4c <II2C1_init+0x138>)
 80009f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80009fa:	6253      	str	r3, [r2, #36]	; 0x24


/*Enable clock access to I2C1*/
RCC->APB1ENR |= I2C1EN;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <II2C1_init+0x134>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	4a11      	ldr	r2, [pc, #68]	; (8000a48 <II2C1_init+0x134>)
 8000a02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a06:	6413      	str	r3, [r2, #64]	; 0x40

//Slave mode peripherial
I2C1-> CR1 |= (1U<<15);
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <II2C1_init+0x13c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <II2C1_init+0x13c>)
 8000a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a12:	6013      	str	r3, [r2, #0]
I2C1-> CR1 &= ~(1U<<15);
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <II2C1_init+0x13c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0d      	ldr	r2, [pc, #52]	; (8000a50 <II2C1_init+0x13c>)
 8000a1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a1e:	6013      	str	r3, [r2, #0]

I2C1-> CR2 = (1U<<4); //16MHZ
 8000a20:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <II2C1_init+0x13c>)
 8000a22:	2210      	movs	r2, #16
 8000a24:	605a      	str	r2, [r3, #4]

//24.6.8 I2C clock control register (I2C_CCR)
I2C1-> CCR = I2C_100KHz;
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <II2C1_init+0x13c>)
 8000a28:	2250      	movs	r2, #80	; 0x50
 8000a2a:	61da      	str	r2, [r3, #28]

//Ser rise time
I2C1-> TRISE =  MD_max_rise_time;
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <II2C1_init+0x13c>)
 8000a2e:	2211      	movs	r2, #17
 8000a30:	621a      	str	r2, [r3, #32]

//enable I2C1 modeule
 I2C1-> CR1 |= CR1_PE;
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <II2C1_init+0x13c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a06      	ldr	r2, [pc, #24]	; (8000a50 <II2C1_init+0x13c>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6013      	str	r3, [r2, #0]
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020400 	.word	0x40020400
 8000a50:	40005400 	.word	0x40005400

08000a54 <II2C1_byteRead>:

void II2C1_byteRead(char saddr, char maddr, char* data)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	603a      	str	r2, [r7, #0]
 8000a5e:	71fb      	strb	r3, [r7, #7]
 8000a60:	460b      	mov	r3, r1
 8000a62:	71bb      	strb	r3, [r7, #6]
	volatile int tmp;

	/* Wait until bus not busy */
	while (I2C1->SR2 & (SR2_BUSY)){}
 8000a64:	bf00      	nop
 8000a66:	4b34      	ldr	r3, [pc, #208]	; (8000b38 <II2C1_byteRead+0xe4>)
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d1f9      	bne.n	8000a66 <II2C1_byteRead+0x12>

	/* Generate start */
	I2C1->CR1 |= CR1_START;
 8000a72:	4b31      	ldr	r3, [pc, #196]	; (8000b38 <II2C1_byteRead+0xe4>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a30      	ldr	r2, [pc, #192]	; (8000b38 <II2C1_byteRead+0xe4>)
 8000a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a7c:	6013      	str	r3, [r2, #0]

	/* Wait until start flag is set */
	while (!(I2C1->SR1 & (SR1_SB))){}
 8000a7e:	bf00      	nop
 8000a80:	4b2d      	ldr	r3, [pc, #180]	; (8000b38 <II2C1_byteRead+0xe4>)
 8000a82:	695b      	ldr	r3, [r3, #20]
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d0f9      	beq.n	8000a80 <II2C1_byteRead+0x2c>
	/* Transmit slave address + Write */
	I2C1->DR = saddr << 1;
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	005a      	lsls	r2, r3, #1
 8000a90:	4b29      	ldr	r3, [pc, #164]	; (8000b38 <II2C1_byteRead+0xe4>)
 8000a92:	611a      	str	r2, [r3, #16]

	/* Wait until addr flag is set */
	while (!(I2C1->SR1 & (SR1_ADDR))){}
 8000a94:	bf00      	nop
 8000a96:	4b28      	ldr	r3, [pc, #160]	; (8000b38 <II2C1_byteRead+0xe4>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	f003 0302 	and.w	r3, r3, #2
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d0f9      	beq.n	8000a96 <II2C1_byteRead+0x42>

	/* Clear addr flag */
	tmp = I2C1->SR2;
 8000aa2:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <II2C1_byteRead+0xe4>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	60fb      	str	r3, [r7, #12]

	/* Send memory address */
	I2C1->DR = maddr;
 8000aa8:	4a23      	ldr	r2, [pc, #140]	; (8000b38 <II2C1_byteRead+0xe4>)
 8000aaa:	79bb      	ldrb	r3, [r7, #6]
 8000aac:	6113      	str	r3, [r2, #16]

	//Wait until transmitter empty
	while (!(I2C1->SR1 & SR1_TXE)){}
 8000aae:	bf00      	nop
 8000ab0:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <II2C1_byteRead+0xe4>)
 8000ab2:	695b      	ldr	r3, [r3, #20]
 8000ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d0f9      	beq.n	8000ab0 <II2C1_byteRead+0x5c>

	/*Generate restart */
	I2C1->CR1 |= CR1_START;
 8000abc:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <II2C1_byteRead+0xe4>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a1d      	ldr	r2, [pc, #116]	; (8000b38 <II2C1_byteRead+0xe4>)
 8000ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac6:	6013      	str	r3, [r2, #0]

	/* Wait until start flag is set */
	while (!(I2C1->SR1 & SR1_SB)){}
 8000ac8:	bf00      	nop
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <II2C1_byteRead+0xe4>)
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d0f9      	beq.n	8000aca <II2C1_byteRead+0x76>

	//Transmit slave address + READ
	I2C1 ->DR= saddr <<1 | 1;
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	f043 0201 	orr.w	r2, r3, #1
 8000ade:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <II2C1_byteRead+0xe4>)
 8000ae0:	611a      	str	r2, [r3, #16]

	while(!(I2C1->SR1 & SR1_ADDR)){}
 8000ae2:	bf00      	nop
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <II2C1_byteRead+0xe4>)
 8000ae6:	695b      	ldr	r3, [r3, #20]
 8000ae8:	f003 0302 	and.w	r3, r3, #2
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d0f9      	beq.n	8000ae4 <II2C1_byteRead+0x90>

	//Disa8le acknowledga
	I2C1 -> CR1 &= ~CR1_ACK;
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <II2C1_byteRead+0xe4>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a10      	ldr	r2, [pc, #64]	; (8000b38 <II2C1_byteRead+0xe4>)
 8000af6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000afa:	6013      	str	r3, [r2, #0]

	//Clear addr flag
	tmp = I2C1 -> SR2;
 8000afc:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <II2C1_byteRead+0xe4>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	60fb      	str	r3, [r7, #12]

	//Generate Stop after data received
	I2C1 -> CR1 |= CR1_STOP;
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <II2C1_byteRead+0xe4>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a0c      	ldr	r2, [pc, #48]	; (8000b38 <II2C1_byteRead+0xe4>)
 8000b08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b0c:	6013      	str	r3, [r2, #0]

	while(!(I2C1->SR1 & SR1_RXNE)){}
 8000b0e:	bf00      	nop
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <II2C1_byteRead+0xe4>)
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d0f9      	beq.n	8000b10 <II2C1_byteRead+0xbc>

	//Read data from DR
	*data++ = I2C1->DR;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <II2C1_byteRead+0xe4>)
 8000b1e:	6919      	ldr	r1, [r3, #16]
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	1c5a      	adds	r2, r3, #1
 8000b24:	603a      	str	r2, [r7, #0]
 8000b26:	b2ca      	uxtb	r2, r1
 8000b28:	701a      	strb	r2, [r3, #0]


}
 8000b2a:	bf00      	nop
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	40005400 	.word	0x40005400

08000b3c <II2C1_burstRead>:

void II2C1_burstRead(char saddr, char maddr, int n, char* data)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b087      	sub	sp, #28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60ba      	str	r2, [r7, #8]
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	4603      	mov	r3, r0
 8000b48:	73fb      	strb	r3, [r7, #15]
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	73bb      	strb	r3, [r7, #14]
	volatile int tmp;

	/* Wait until bus not busy */
	while (I2C1->SR2 & (SR2_BUSY)){}
 8000b4e:	bf00      	nop
 8000b50:	4b47      	ldr	r3, [pc, #284]	; (8000c70 <II2C1_burstRead+0x134>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f003 0302 	and.w	r3, r3, #2
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d1f9      	bne.n	8000b50 <II2C1_burstRead+0x14>

	/* Generate start */
	I2C1->CR1 |= CR1_START;
 8000b5c:	4b44      	ldr	r3, [pc, #272]	; (8000c70 <II2C1_burstRead+0x134>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a43      	ldr	r2, [pc, #268]	; (8000c70 <II2C1_burstRead+0x134>)
 8000b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b66:	6013      	str	r3, [r2, #0]

	/* Wait until start flag is set */
	while (!(I2C1->SR1 & SR1_SB)){}
 8000b68:	bf00      	nop
 8000b6a:	4b41      	ldr	r3, [pc, #260]	; (8000c70 <II2C1_burstRead+0x134>)
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d0f9      	beq.n	8000b6a <II2C1_burstRead+0x2e>

	/* Transmit slave address + Write */
	I2C1->DR = saddr << 1;
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	005a      	lsls	r2, r3, #1
 8000b7a:	4b3d      	ldr	r3, [pc, #244]	; (8000c70 <II2C1_burstRead+0x134>)
 8000b7c:	611a      	str	r2, [r3, #16]

	/* Wait until addr flag is set */
	while (!(I2C1->SR1 & SR1_ADDR)){}
 8000b7e:	bf00      	nop
 8000b80:	4b3b      	ldr	r3, [pc, #236]	; (8000c70 <II2C1_burstRead+0x134>)
 8000b82:	695b      	ldr	r3, [r3, #20]
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d0f9      	beq.n	8000b80 <II2C1_burstRead+0x44>

	/* Clear addr flag */
	tmp = I2C1->SR2;
 8000b8c:	4b38      	ldr	r3, [pc, #224]	; (8000c70 <II2C1_burstRead+0x134>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	617b      	str	r3, [r7, #20]

	/* Wait until transmitter empty */
	while (!(I2C1->SR1 & SR1_TXE)){}
 8000b92:	bf00      	nop
 8000b94:	4b36      	ldr	r3, [pc, #216]	; (8000c70 <II2C1_burstRead+0x134>)
 8000b96:	695b      	ldr	r3, [r3, #20]
 8000b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d0f9      	beq.n	8000b94 <II2C1_burstRead+0x58>

	/*Send memory address */
	I2C1->DR = maddr;
 8000ba0:	4a33      	ldr	r2, [pc, #204]	; (8000c70 <II2C1_burstRead+0x134>)
 8000ba2:	7bbb      	ldrb	r3, [r7, #14]
 8000ba4:	6113      	str	r3, [r2, #16]

	/*Wait until transmitter empty */
	while (!(I2C1->SR1 & SR1_TXE)){}
 8000ba6:	bf00      	nop
 8000ba8:	4b31      	ldr	r3, [pc, #196]	; (8000c70 <II2C1_burstRead+0x134>)
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d0f9      	beq.n	8000ba8 <II2C1_burstRead+0x6c>

	/*Generate restart */
	I2C1->CR1 |= CR1_START;
 8000bb4:	4b2e      	ldr	r3, [pc, #184]	; (8000c70 <II2C1_burstRead+0x134>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a2d      	ldr	r2, [pc, #180]	; (8000c70 <II2C1_burstRead+0x134>)
 8000bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bbe:	6013      	str	r3, [r2, #0]

	//wait until start flag is set
	while (!(I2C1->SR1 & SR1_SB)){}
 8000bc0:	bf00      	nop
 8000bc2:	4b2b      	ldr	r3, [pc, #172]	; (8000c70 <II2C1_burstRead+0x134>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d0f9      	beq.n	8000bc2 <II2C1_burstRead+0x86>

	//transmit slave address + Read
	I2C1->DR = saddr << 1 | 1;
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	f043 0201 	orr.w	r2, r3, #1
 8000bd6:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <II2C1_burstRead+0x134>)
 8000bd8:	611a      	str	r2, [r3, #16]

	//wait until addr flag is set
	while (!(I2C1->SR1 & SR1_ADDR)){}
 8000bda:	bf00      	nop
 8000bdc:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <II2C1_burstRead+0x134>)
 8000bde:	695b      	ldr	r3, [r3, #20]
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d0f9      	beq.n	8000bdc <II2C1_burstRead+0xa0>

	//clear addr flag
	tmp = I2C1 ->SR2;
 8000be8:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <II2C1_burstRead+0x134>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	617b      	str	r3, [r7, #20]

	//Enable acknowledge
	I2C1 -> CR1 |= CR1_ACK;
 8000bee:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <II2C1_burstRead+0x134>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a1f      	ldr	r2, [pc, #124]	; (8000c70 <II2C1_burstRead+0x134>)
 8000bf4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bf8:	6013      	str	r3, [r2, #0]

	while (n > 0U)
 8000bfa:	e02e      	b.n	8000c5a <II2C1_burstRead+0x11e>
	{
		/*if one byte*/
		if(n == 1U)
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d11a      	bne.n	8000c38 <II2C1_burstRead+0xfc>
		{
			/* Disable Acknowledge */
			I2C1-> CR1 &= ~CR1_ACK;
 8000c02:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <II2C1_burstRead+0x134>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a1a      	ldr	r2, [pc, #104]	; (8000c70 <II2C1_burstRead+0x134>)
 8000c08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c0c:	6013      	str	r3, [r2, #0]

			/* Generate Stop */
			I2C1-> CR1 |= CR1_STOP;
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <II2C1_burstRead+0x134>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a17      	ldr	r2, [pc, #92]	; (8000c70 <II2C1_burstRead+0x134>)
 8000c14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c18:	6013      	str	r3, [r2, #0]

			/* Wait for RXNE flag set */
			while (!(I2C1->SR1 & SR1_RXNE)){}
 8000c1a:	bf00      	nop
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <II2C1_burstRead+0x134>)
 8000c1e:	695b      	ldr	r3, [r3, #20]
 8000c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d0f9      	beq.n	8000c1c <II2C1_burstRead+0xe0>

			/* Read data from DR */
			*data++ = I2C1->DR;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <II2C1_burstRead+0x134>)
 8000c2a:	6919      	ldr	r1, [r3, #16]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	1c5a      	adds	r2, r3, #1
 8000c30:	607a      	str	r2, [r7, #4]
 8000c32:	b2ca      	uxtb	r2, r1
 8000c34:	701a      	strb	r2, [r3, #0]
			break;
 8000c36:	e014      	b.n	8000c62 <II2C1_burstRead+0x126>

		else
		{
			/* Wait until RXNE flag is set */

			while (!(I2C1->SR1 & SR1_RXNE)){}
 8000c38:	bf00      	nop
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <II2C1_burstRead+0x134>)
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d0f9      	beq.n	8000c3a <II2C1_burstRead+0xfe>

			/* Read data from DR +*/
			(*data++) = I2C1->DR;
 8000c46:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <II2C1_burstRead+0x134>)
 8000c48:	6919      	ldr	r1, [r3, #16]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	1c5a      	adds	r2, r3, #1
 8000c4e:	607a      	str	r2, [r7, #4]
 8000c50:	b2ca      	uxtb	r2, r1
 8000c52:	701a      	strb	r2, [r3, #0]

			n--;
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	60bb      	str	r3, [r7, #8]
	while (n > 0U)
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d1cd      	bne.n	8000bfc <II2C1_burstRead+0xc0>
		}
	}

}
 8000c60:	bf00      	nop
 8000c62:	bf00      	nop
 8000c64:	371c      	adds	r7, #28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40005400 	.word	0x40005400

08000c74 <II2C1_burstWrite>:
void II2C1_burstWrite(char saddr, char maddr, int n, char* data)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b087      	sub	sp, #28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60ba      	str	r2, [r7, #8]
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	4603      	mov	r3, r0
 8000c80:	73fb      	strb	r3, [r7, #15]
 8000c82:	460b      	mov	r3, r1
 8000c84:	73bb      	strb	r3, [r7, #14]
	volatile int tmp;

	/* Wait until bus not busy */
	while (I2C1->SR2 & (SR2_BUSY)){}
 8000c86:	bf00      	nop
 8000c88:	4b2a      	ldr	r3, [pc, #168]	; (8000d34 <II2C1_burstWrite+0xc0>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f003 0302 	and.w	r3, r3, #2
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1f9      	bne.n	8000c88 <II2C1_burstWrite+0x14>

	/* Generate start */
	I2C1->CR1 |= CR1_START;
 8000c94:	4b27      	ldr	r3, [pc, #156]	; (8000d34 <II2C1_burstWrite+0xc0>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a26      	ldr	r2, [pc, #152]	; (8000d34 <II2C1_burstWrite+0xc0>)
 8000c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9e:	6013      	str	r3, [r2, #0]

	/* Wait until start flag is set */
	while (!(I2C1->SR1 & (SR1_SB))){}
 8000ca0:	bf00      	nop
 8000ca2:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <II2C1_burstWrite+0xc0>)
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d0f9      	beq.n	8000ca2 <II2C1_burstWrite+0x2e>

	/* Transmit slave address */
	I2C1->DR = saddr << 1;
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	005a      	lsls	r2, r3, #1
 8000cb2:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <II2C1_burstWrite+0xc0>)
 8000cb4:	611a      	str	r2, [r3, #16]

	/* Wait until addr flag is set */
	while (!(I2C1->SR1 & (SR1_ADDR))){}
 8000cb6:	bf00      	nop
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <II2C1_burstWrite+0xc0>)
 8000cba:	695b      	ldr	r3, [r3, #20]
 8000cbc:	f003 0302 	and.w	r3, r3, #2
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d0f9      	beq.n	8000cb8 <II2C1_burstWrite+0x44>

	/* Clear addr flag */
	tmp = I2C1->SR2;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <II2C1_burstWrite+0xc0>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	613b      	str	r3, [r7, #16]

	/* Wait until data register empty */
	while (!(I2C1->SR1 & (SR1_TXE))){}
 8000cca:	bf00      	nop
 8000ccc:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <II2C1_burstWrite+0xc0>)
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d0f9      	beq.n	8000ccc <II2C1_burstWrite+0x58>

	/* Send memory address */
	I2C1->DR = maddr;
 8000cd8:	4a16      	ldr	r2, [pc, #88]	; (8000d34 <II2C1_burstWrite+0xc0>)
 8000cda:	7bbb      	ldrb	r3, [r7, #14]
 8000cdc:	6113      	str	r3, [r2, #16]

	for (int i = 0; i< n; i++) {
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
 8000ce2:	e00f      	b.n	8000d04 <II2C1_burstWrite+0x90>
		/* Wait until data register empty */
		while (!(I2C1->SR1 & (SR1_TXE))){}
 8000ce4:	bf00      	nop
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <II2C1_burstWrite+0xc0>)
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d0f9      	beq.n	8000ce6 <II2C1_burstWrite+0x72>

		//transmit memory address
		I2C1-> DR = *data++;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	1c5a      	adds	r2, r3, #1
 8000cf6:	607a      	str	r2, [r7, #4]
 8000cf8:	781a      	ldrb	r2, [r3, #0]
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <II2C1_burstWrite+0xc0>)
 8000cfc:	611a      	str	r2, [r3, #16]
	for (int i = 0; i< n; i++) {
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	3301      	adds	r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	dbeb      	blt.n	8000ce4 <II2C1_burstWrite+0x70>
	}

	//wait memory address
	while (!(I2C1->SR1 & (SR1_BTF))){}
 8000d0c:	bf00      	nop
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <II2C1_burstWrite+0xc0>)
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	f003 0304 	and.w	r3, r3, #4
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d0f9      	beq.n	8000d0e <II2C1_burstWrite+0x9a>

	//Generate stop
	I2C1->CR1 |= CR1_STOP;
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <II2C1_burstWrite+0xc0>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <II2C1_burstWrite+0xc0>)
 8000d20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d24:	6013      	str	r3, [r2, #0]
}
 8000d26:	bf00      	nop
 8000d28:	371c      	adds	r7, #28
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40005400 	.word	0x40005400

08000d38 <main>:
extern uint8_t data_rec[6];
//const float FOUR_G_SCALE_FACT = 0.0078;

////////////////////////////Programa general
int main (void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0

	//I2C
	aadxl_init();
 8000d3c:	f7ff fdd4 	bl	80008e8 <aadxl_init>
	while(1)
	{
		aadxl_read_values(DATA_START_ADDR);
 8000d40:	2032      	movs	r0, #50	; 0x32
 8000d42:	f7ff fdbf 	bl	80008c4 <aadxl_read_values>
		x = ((data_rec[1]<<8) | data_rec[0]);
 8000d46:	4b32      	ldr	r3, [pc, #200]	; (8000e10 <main+0xd8>)
 8000d48:	785b      	ldrb	r3, [r3, #1]
 8000d4a:	021b      	lsls	r3, r3, #8
 8000d4c:	b21a      	sxth	r2, r3
 8000d4e:	4b30      	ldr	r3, [pc, #192]	; (8000e10 <main+0xd8>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	b21b      	sxth	r3, r3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	b21a      	sxth	r2, r3
 8000d58:	4b2e      	ldr	r3, [pc, #184]	; (8000e14 <main+0xdc>)
 8000d5a:	801a      	strh	r2, [r3, #0]
		y = ((data_rec[3]<<8) | data_rec[2]);
 8000d5c:	4b2c      	ldr	r3, [pc, #176]	; (8000e10 <main+0xd8>)
 8000d5e:	78db      	ldrb	r3, [r3, #3]
 8000d60:	021b      	lsls	r3, r3, #8
 8000d62:	b21a      	sxth	r2, r3
 8000d64:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <main+0xd8>)
 8000d66:	789b      	ldrb	r3, [r3, #2]
 8000d68:	b21b      	sxth	r3, r3
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	b21a      	sxth	r2, r3
 8000d6e:	4b2a      	ldr	r3, [pc, #168]	; (8000e18 <main+0xe0>)
 8000d70:	801a      	strh	r2, [r3, #0]
		z = ((data_rec[5]<<8) | data_rec[4]);
 8000d72:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <main+0xd8>)
 8000d74:	795b      	ldrb	r3, [r3, #5]
 8000d76:	021b      	lsls	r3, r3, #8
 8000d78:	b21a      	sxth	r2, r3
 8000d7a:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <main+0xd8>)
 8000d7c:	791b      	ldrb	r3, [r3, #4]
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	4313      	orrs	r3, r2
 8000d82:	b21a      	sxth	r2, r3
 8000d84:	4b25      	ldr	r3, [pc, #148]	; (8000e1c <main+0xe4>)
 8000d86:	801a      	strh	r2, [r3, #0]

		xg = (x*0.0078);
 8000d88:	4b22      	ldr	r3, [pc, #136]	; (8000e14 <main+0xdc>)
 8000d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fcb6 	bl	8000700 <__aeabi_i2d>
 8000d94:	a31c      	add	r3, pc, #112	; (adr r3, 8000e08 <main+0xd0>)
 8000d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d9a:	f7ff fa35 	bl	8000208 <__aeabi_dmul>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	460b      	mov	r3, r1
 8000da2:	4610      	mov	r0, r2
 8000da4:	4619      	mov	r1, r3
 8000da6:	f7ff fd15 	bl	80007d4 <__aeabi_d2f>
 8000daa:	4603      	mov	r3, r0
 8000dac:	4a1c      	ldr	r2, [pc, #112]	; (8000e20 <main+0xe8>)
 8000dae:	6013      	str	r3, [r2, #0]
		yg = (y*0.0078);
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <main+0xe0>)
 8000db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fca2 	bl	8000700 <__aeabi_i2d>
 8000dbc:	a312      	add	r3, pc, #72	; (adr r3, 8000e08 <main+0xd0>)
 8000dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc2:	f7ff fa21 	bl	8000208 <__aeabi_dmul>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	460b      	mov	r3, r1
 8000dca:	4610      	mov	r0, r2
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f7ff fd01 	bl	80007d4 <__aeabi_d2f>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a13      	ldr	r2, [pc, #76]	; (8000e24 <main+0xec>)
 8000dd6:	6013      	str	r3, [r2, #0]
		zg = (z*0.0078);
 8000dd8:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <main+0xe4>)
 8000dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fc8e 	bl	8000700 <__aeabi_i2d>
 8000de4:	a308      	add	r3, pc, #32	; (adr r3, 8000e08 <main+0xd0>)
 8000de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dea:	f7ff fa0d 	bl	8000208 <__aeabi_dmul>
 8000dee:	4602      	mov	r2, r0
 8000df0:	460b      	mov	r3, r1
 8000df2:	4610      	mov	r0, r2
 8000df4:	4619      	mov	r1, r3
 8000df6:	f7ff fced 	bl	80007d4 <__aeabi_d2f>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <main+0xf0>)
 8000dfe:	6013      	str	r3, [r2, #0]
		aadxl_read_values(DATA_START_ADDR);
 8000e00:	e79e      	b.n	8000d40 <main+0x8>
 8000e02:	bf00      	nop
 8000e04:	f3af 8000 	nop.w
 8000e08:	8e8a71de 	.word	0x8e8a71de
 8000e0c:	3f7ff2e4 	.word	0x3f7ff2e4
 8000e10:	20000020 	.word	0x20000020
 8000e14:	20000026 	.word	0x20000026
 8000e18:	20000028 	.word	0x20000028
 8000e1c:	2000002a 	.word	0x2000002a
 8000e20:	2000002c 	.word	0x2000002c
 8000e24:	20000030 	.word	0x20000030
 8000e28:	20000034 	.word	0x20000034

08000e2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e2c:	480d      	ldr	r0, [pc, #52]	; (8000e64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e2e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e30:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e34:	480c      	ldr	r0, [pc, #48]	; (8000e68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e36:	490d      	ldr	r1, [pc, #52]	; (8000e6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e38:	4a0d      	ldr	r2, [pc, #52]	; (8000e70 <LoopForever+0xe>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e4c:	4c0a      	ldr	r4, [pc, #40]	; (8000e78 <LoopForever+0x16>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e5a:	f000 f811 	bl	8000e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e5e:	f7ff ff6b 	bl	8000d38 <main>

08000e62 <LoopForever>:

LoopForever:
  b LoopForever
 8000e62:	e7fe      	b.n	8000e62 <LoopForever>
  ldr   r0, =_estack
 8000e64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000e70:	08000ee8 	.word	0x08000ee8
  ldr r2, =_sbss
 8000e74:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000e78:	20000038 	.word	0x20000038

08000e7c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC_IRQHandler>
	...

08000e80 <__libc_init_array>:
 8000e80:	b570      	push	{r4, r5, r6, lr}
 8000e82:	4d0d      	ldr	r5, [pc, #52]	; (8000eb8 <__libc_init_array+0x38>)
 8000e84:	4c0d      	ldr	r4, [pc, #52]	; (8000ebc <__libc_init_array+0x3c>)
 8000e86:	1b64      	subs	r4, r4, r5
 8000e88:	10a4      	asrs	r4, r4, #2
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	42a6      	cmp	r6, r4
 8000e8e:	d109      	bne.n	8000ea4 <__libc_init_array+0x24>
 8000e90:	4d0b      	ldr	r5, [pc, #44]	; (8000ec0 <__libc_init_array+0x40>)
 8000e92:	4c0c      	ldr	r4, [pc, #48]	; (8000ec4 <__libc_init_array+0x44>)
 8000e94:	f000 f818 	bl	8000ec8 <_init>
 8000e98:	1b64      	subs	r4, r4, r5
 8000e9a:	10a4      	asrs	r4, r4, #2
 8000e9c:	2600      	movs	r6, #0
 8000e9e:	42a6      	cmp	r6, r4
 8000ea0:	d105      	bne.n	8000eae <__libc_init_array+0x2e>
 8000ea2:	bd70      	pop	{r4, r5, r6, pc}
 8000ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ea8:	4798      	blx	r3
 8000eaa:	3601      	adds	r6, #1
 8000eac:	e7ee      	b.n	8000e8c <__libc_init_array+0xc>
 8000eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8000eb2:	4798      	blx	r3
 8000eb4:	3601      	adds	r6, #1
 8000eb6:	e7f2      	b.n	8000e9e <__libc_init_array+0x1e>
 8000eb8:	08000ee0 	.word	0x08000ee0
 8000ebc:	08000ee0 	.word	0x08000ee0
 8000ec0:	08000ee0 	.word	0x08000ee0
 8000ec4:	08000ee4 	.word	0x08000ee4

08000ec8 <_init>:
 8000ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eca:	bf00      	nop
 8000ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ece:	bc08      	pop	{r3}
 8000ed0:	469e      	mov	lr, r3
 8000ed2:	4770      	bx	lr

08000ed4 <_fini>:
 8000ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ed6:	bf00      	nop
 8000ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eda:	bc08      	pop	{r3}
 8000edc:	469e      	mov	lr, r3
 8000ede:	4770      	bx	lr
