
8_adc_nucleo_cgpt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001b4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000378  08000380  00010380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000378  08000378  00010380  2**0
                  CONTENTS
  4 .ARM          00000000  08000378  08000378  00010380  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000378  08000380  00010380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000378  08000378  00010378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800037c  0800037c  0001037c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000380  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000380  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010380  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004db  00000000  00000000  000103b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000144  00000000  00000000  0001088b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000058  00000000  00000000  000109d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000040  00000000  00000000  00010a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196d4  00000000  00000000  00010a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000076c  00000000  00000000  0002a13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e643  00000000  00000000  0002a8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b8eeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000009c  00000000  00000000  000b8f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000360 	.word	0x08000360

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000360 	.word	0x08000360

08000204 <main>:

void ADC_Init(void);
uint32_t ADC_Read(void);

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0


    while (1)
    {
    	ADC_Init();
 800020a:	f000 f805 	bl	8000218 <ADC_Init>
        uint32_t adc_value = ADC_Read();
 800020e:	f000 f841 	bl	8000294 <ADC_Read>
 8000212:	6078      	str	r0, [r7, #4]
    {
 8000214:	e7f9      	b.n	800020a <main+0x6>
	...

08000218 <ADC_Init>:
        // Haz algo con el valor leído del ADC
    }
}

void ADC_Init(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
    // Habilitar el reloj para el ADC1
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 800021c:	4b1a      	ldr	r3, [pc, #104]	; (8000288 <ADC_Init+0x70>)
 800021e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000220:	4a19      	ldr	r2, [pc, #100]	; (8000288 <ADC_Init+0x70>)
 8000222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000226:	6453      	str	r3, [r2, #68]	; 0x44

    // Habilitar el reloj para el GPIOA
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000228:	4b17      	ldr	r3, [pc, #92]	; (8000288 <ADC_Init+0x70>)
 800022a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800022c:	4a16      	ldr	r2, [pc, #88]	; (8000288 <ADC_Init+0x70>)
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	6313      	str	r3, [r2, #48]	; 0x30

    // Configurar el pin A1 como entrada analógica
    GPIOA->MODER |= GPIO_MODER_MODER1;
 8000234:	4b15      	ldr	r3, [pc, #84]	; (800028c <ADC_Init+0x74>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a14      	ldr	r2, [pc, #80]	; (800028c <ADC_Init+0x74>)
 800023a:	f043 030c 	orr.w	r3, r3, #12
 800023e:	6013      	str	r3, [r2, #0]

    // Configurar la frecuencia de muestreo del ADC
    ADC1->CR2 |= ADC_CR2_ADON; // Habilitar el ADC
 8000240:	4b13      	ldr	r3, [pc, #76]	; (8000290 <ADC_Init+0x78>)
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	4a12      	ldr	r2, [pc, #72]	; (8000290 <ADC_Init+0x78>)
 8000246:	f043 0301 	orr.w	r3, r3, #1
 800024a:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= ADC_CR2_CONT; // Modo de conversión continua
 800024c:	4b10      	ldr	r3, [pc, #64]	; (8000290 <ADC_Init+0x78>)
 800024e:	689b      	ldr	r3, [r3, #8]
 8000250:	4a0f      	ldr	r2, [pc, #60]	; (8000290 <ADC_Init+0x78>)
 8000252:	f043 0302 	orr.w	r3, r3, #2
 8000256:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= ADC_CR2_SWSTART; // Iniciar la conversión
 8000258:	4b0d      	ldr	r3, [pc, #52]	; (8000290 <ADC_Init+0x78>)
 800025a:	689b      	ldr	r3, [r3, #8]
 800025c:	4a0c      	ldr	r2, [pc, #48]	; (8000290 <ADC_Init+0x78>)
 800025e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000262:	6093      	str	r3, [r2, #8]

    // Configurar el canal del ADC
    ADC1->SQR3 |= 0x01; // Seleccionar el canal 1
 8000264:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <ADC_Init+0x78>)
 8000266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000268:	4a09      	ldr	r2, [pc, #36]	; (8000290 <ADC_Init+0x78>)
 800026a:	f043 0301 	orr.w	r3, r3, #1
 800026e:	6353      	str	r3, [r2, #52]	; 0x34

    // Calibrar el ADC
    ADC1->CR2 |= ADC_CR2_ADON; // Habilitar el ADC
 8000270:	4b07      	ldr	r3, [pc, #28]	; (8000290 <ADC_Init+0x78>)
 8000272:	689b      	ldr	r3, [r3, #8]
 8000274:	4a06      	ldr	r2, [pc, #24]	; (8000290 <ADC_Init+0x78>)
 8000276:	f043 0301 	orr.w	r3, r3, #1
 800027a:	6093      	str	r3, [r2, #8]
    //ADC1->CR2 |= ADC_CR2_CAL; // Iniciar la calibración
    //while (ADC1->CR2 & ADC_CR2_CAL) {} // Esperar hasta que la calibración haya terminado
}
 800027c:	bf00      	nop
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	40023800 	.word	0x40023800
 800028c:	40020000 	.word	0x40020000
 8000290:	40012000 	.word	0x40012000

08000294 <ADC_Read>:

uint32_t ADC_Read(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
    ADC1->CR2 |= ADC_CR2_SWSTART; // Iniciar la conversión
 8000298:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <ADC_Read+0x2c>)
 800029a:	689b      	ldr	r3, [r3, #8]
 800029c:	4a08      	ldr	r2, [pc, #32]	; (80002c0 <ADC_Read+0x2c>)
 800029e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80002a2:	6093      	str	r3, [r2, #8]

    // Esperar hasta que la conversión se complete
    while (!(ADC1->SR & ADC_SR_EOC)) {}
 80002a4:	bf00      	nop
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <ADC_Read+0x2c>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f003 0302 	and.w	r3, r3, #2
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d0f9      	beq.n	80002a6 <ADC_Read+0x12>

    return ADC1->DR; // Devolver el valor convertido
 80002b2:	4b03      	ldr	r3, [pc, #12]	; (80002c0 <ADC_Read+0x2c>)
 80002b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80002b6:	4618      	mov	r0, r3
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr
 80002c0:	40012000 	.word	0x40012000

080002c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c4:	480d      	ldr	r0, [pc, #52]	; (80002fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002cc:	480c      	ldr	r0, [pc, #48]	; (8000300 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ce:	490d      	ldr	r1, [pc, #52]	; (8000304 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d0:	4a0d      	ldr	r2, [pc, #52]	; (8000308 <LoopForever+0xe>)
  movs r3, #0
 80002d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d4:	e002      	b.n	80002dc <LoopCopyDataInit>

080002d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002da:	3304      	adds	r3, #4

080002dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e0:	d3f9      	bcc.n	80002d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e2:	4a0a      	ldr	r2, [pc, #40]	; (800030c <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e4:	4c0a      	ldr	r4, [pc, #40]	; (8000310 <LoopForever+0x16>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e8:	e001      	b.n	80002ee <LoopFillZerobss>

080002ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002ec:	3204      	adds	r2, #4

080002ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f0:	d3fb      	bcc.n	80002ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002f2:	f000 f811 	bl	8000318 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002f6:	f7ff ff85 	bl	8000204 <main>

080002fa <LoopForever>:

LoopForever:
  b LoopForever
 80002fa:	e7fe      	b.n	80002fa <LoopForever>
  ldr   r0, =_estack
 80002fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000304:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000308:	08000380 	.word	0x08000380
  ldr r2, =_sbss
 800030c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000310:	2000001c 	.word	0x2000001c

08000314 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000314:	e7fe      	b.n	8000314 <ADC_IRQHandler>
	...

08000318 <__libc_init_array>:
 8000318:	b570      	push	{r4, r5, r6, lr}
 800031a:	4d0d      	ldr	r5, [pc, #52]	; (8000350 <__libc_init_array+0x38>)
 800031c:	4c0d      	ldr	r4, [pc, #52]	; (8000354 <__libc_init_array+0x3c>)
 800031e:	1b64      	subs	r4, r4, r5
 8000320:	10a4      	asrs	r4, r4, #2
 8000322:	2600      	movs	r6, #0
 8000324:	42a6      	cmp	r6, r4
 8000326:	d109      	bne.n	800033c <__libc_init_array+0x24>
 8000328:	4d0b      	ldr	r5, [pc, #44]	; (8000358 <__libc_init_array+0x40>)
 800032a:	4c0c      	ldr	r4, [pc, #48]	; (800035c <__libc_init_array+0x44>)
 800032c:	f000 f818 	bl	8000360 <_init>
 8000330:	1b64      	subs	r4, r4, r5
 8000332:	10a4      	asrs	r4, r4, #2
 8000334:	2600      	movs	r6, #0
 8000336:	42a6      	cmp	r6, r4
 8000338:	d105      	bne.n	8000346 <__libc_init_array+0x2e>
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000340:	4798      	blx	r3
 8000342:	3601      	adds	r6, #1
 8000344:	e7ee      	b.n	8000324 <__libc_init_array+0xc>
 8000346:	f855 3b04 	ldr.w	r3, [r5], #4
 800034a:	4798      	blx	r3
 800034c:	3601      	adds	r6, #1
 800034e:	e7f2      	b.n	8000336 <__libc_init_array+0x1e>
 8000350:	08000378 	.word	0x08000378
 8000354:	08000378 	.word	0x08000378
 8000358:	08000378 	.word	0x08000378
 800035c:	0800037c 	.word	0x0800037c

08000360 <_init>:
 8000360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000362:	bf00      	nop
 8000364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000366:	bc08      	pop	{r3}
 8000368:	469e      	mov	lr, r3
 800036a:	4770      	bx	lr

0800036c <_fini>:
 800036c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036e:	bf00      	nop
 8000370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000372:	bc08      	pop	{r3}
 8000374:	469e      	mov	lr, r3
 8000376:	4770      	bx	lr
